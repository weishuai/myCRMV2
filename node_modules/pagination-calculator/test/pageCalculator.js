"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageCalculator = function (options) {
    var total = options.total, pageLimit = options.pageLimit;
    var current = options.current || 1;
    var pageSize = options.pageSize || 10;
    var pageCount = Math.ceil(total / pageSize);
    var pages = getPages(pageCount, pageLimit, current);
    var next = current < pageCount && current + 1;
    var previous = current > 1 && current - 1;
    var showingStart = current * pageSize + 1 - pageSize;
    var showingEnd = total < pageSize || current === pageCount
        ? total
        : current * pageSize;
    return {
        total: total,
        current: current,
        pageCount: pageCount,
        pages: pages,
        next: next,
        previous: previous,
        showingStart: showingStart,
        showingEnd: showingEnd
    };
};
var getPages = function (pageCount, pageLimit, current) {
    var pages = [];
    if (pageLimit === undefined || pageCount <= pageLimit) {
        addPageRange(pages, 1, pageCount);
        return pages;
    }
    var threshold = Math.ceil(pageLimit / 2);
    if ((current - 1) <= threshold) {
        addPageRange(pages, 1, pageLimit - 3);
        addEllipsis(pages);
        addPageRange(pages, pageCount - 1, pageCount);
        return pages;
    }
    if (current + 1 > (pageCount - threshold)) {
        addPageRange(pages, 1, 2);
        addEllipsis(pages);
        addPageRange(pages, pageCount - (threshold + 1), pageCount);
        return pages;
    }
    if (current > threshold && current <= (pageCount - threshold)) {
        addPageRange(pages, 1, getStartMax(current, pageCount, pageLimit));
        addEllipsis(pages);
        addPageRange(pages, current - 2, current + 2);
        addEllipsis(pages);
        addPageRange(pages, getEndMin(current, pageCount, pageLimit), pageCount);
        return pages;
    }
    if (current > (pageCount - threshold)) {
        addPageRange(pages, 1, 2);
        addEllipsis(pages);
        addPageRange(pages, pageCount - (threshold + 1), pageCount);
        return pages;
    }
    return pages;
};
var addPageRange = function (pages, start, end) {
    for (var i = start; i < end + 1; i++) {
        pages.push(i);
    }
};
var addEllipsis = function (pages) { return pages.push("..."); };
var getStartMax = function (current, pageCount, pageLimit) {
    var max = (pageLimit - 7) / 2;
    return current < pageCount / 2
        ? Math.floor(max)
        : Math.ceil(max);
};
var getEndMin = function (current, pageCount, pageLimit) {
    var min = (pageLimit - 7) / 2;
    return pageCount + 1 - (current > pageCount / 2
        ? Math.floor(min)
        : Math.ceil(min));
};
